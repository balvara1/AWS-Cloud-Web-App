using System;
using System.Collections.Generic;
using System.Linq;
using Amazon.DynamoDBv2;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using _301171014deguzman_301128209alvarado_Lab3.Models;
using Amazon.DynamoDBv2.DataModel;
using Amazon.S3;
using Amazon.S3.Model;
using System.Collections.ObjectModel;
using System.IO;
using Amazon.S3.Transfer;
using Microsoft.AspNetCore.Http;
using Amazon;


namespace _301171014deguzman_301128209alvarado_Lab3.Controllers
{
    public class MoviesController : Controller
    {
        private readonly String bucketName = "lab3moviebucketft";
        private readonly IAmazonDynamoDB _dynamoDBClient;
        private readonly IDynamoDBContext _dynamoDBContext;
        private static IAmazonS3 _s3Client;


        private List<ObjectModel> objects = new List<ObjectModel>();


        public MoviesController(IAmazonDynamoDB dynamoDBClient, IDynamoDBContext dynamoDBContext, IAmazonS3 s3Client)
        {
            _dynamoDBClient = dynamoDBClient;
            _dynamoDBContext = dynamoDBContext;
            _s3Client = s3Client;
        }

        /*public async Task<IActionResult> Index(LoginModel objLoginModel)
        {
            return View(await GetAllMovie());
        }*/

        public async Task<IActionResult> Index(string filterBy)
        {
            // get all the movies
            List<Movie> allMovies = await GetAllMovie();

            if (filterBy == "all" || filterBy == null)
            {
                return View(allMovies);
            }
            try
            {
                // filter by
                int filterValue = Int32.Parse(filterBy);
                return View(allMovies.Where(x => x.OverallRating >= filterValue));
            }
            catch
            {
                return NotFound();
            }

        }

        // GET: Movies/Create
        public IActionResult Create()
        {
            return View();
        }

        // POST Movies/Create
        /*[HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(Movie movie)
        // public IActionResult Create(Movie movie)
        {
            // for now our movie id is generated by current time in unix format
            // save the bookmark time on close of the pdf viewer or on bookmark click
            movie.MovieID = DateTimeOffset.Now.ToUnixTimeMilliseconds();

            if (ModelState.IsValid)
            {
                await _dynamoDBContext.SaveAsync(movie);
                return RedirectToAction(nameof(Index));
            }

            return View(movie);
        }*/

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("MovieID,Title,Genre,ReleaseYear,Directors,Cast,MotionPictureRating,CreatorID,File")] FileModel movie)
        {
            // for now our movie id is generated by current time in unix format
            // save the bookmark time on close of the pdf viewer or on bookmark click

            var loggedInUser = HttpContext.Session.GetString("LoggedInUser");
            movie.MovieID = DateTimeOffset.Now.ToUnixTimeMilliseconds();
            movie.CreatorID = loggedInUser;

            Console.WriteLine($"new movie: {movie.ToString()}");
            Console.WriteLine($"new movie file {movie.File.FileName}");

            if (ModelState.IsValid)
            {
                
                string movId = movie.MovieID.ToString();
                // set S3Key's value
                movie.S3Key = movId + Path.GetExtension(movie.File.FileName);
                // set overall rating to 0 for initial creation
                movie.OverallRating = 0;

                using (var stream = new MemoryStream())
                {
                    await movie.File.CopyToAsync(stream);
                    var transfer = new TransferUtility(_s3Client);
                    PutObjectRequest req = new PutObjectRequest
                    {
                        BucketName = bucketName,
                        InputStream = stream,
                        Key = movie.S3Key
                    };
                    PutObjectResponse res = await transfer.S3Client.PutObjectAsync(req);
                }

                await _dynamoDBContext.SaveAsync<FileModel>(movie);
                return RedirectToAction(nameof(Index));
            }

            return View(movie);
        }

        // GET: Movies/Details?MovieID=<MovieId>
        public async Task<IActionResult> Details(string movieId)
        {
            if (movieId == null)
            {
                return NotFound();
            }

            try
            {
                long parsedMovieId = Int64.Parse(movieId);
                Movie movie = await GetMovie(parsedMovieId);

                if (movie == default)
                {
                    return NotFound();
                }

                if (movie.Reviews != null)
                {
                    DateTime timeNow = DateTime.UtcNow;
                    foreach (Review aReview in movie.Reviews)
                    {
                        // Console.WriteLine($"Review: {aReview.ToString()}");
                        DateTime reviewTime = DateTimeOffset.FromUnixTimeMilliseconds(aReview.CommentTime).DateTime;
                        int dayDifference = (timeNow - reviewTime).Days;
                        int hourDifference = (timeNow - reviewTime).Hours;


                        //Console.WriteLine($"hour difference: {hourDifference}\n");
                        //Console.WriteLine($"day difference: {dayDifference}\n");
                    }
                }
                
                return View(movie);
            }
            catch (Exception ex)
            {
                return NotFound();
            }
        }

        // GET: Movies/Edit?MovieID=<MovieID>
        public async Task<IActionResult> Edit(string movieId)
        {
            if (movieId == null)
            {
                return NotFound();
            }

            try
            {
                long parsedMovieId = Int64.Parse(movieId);
                // Console.WriteLine($"parsed movie id: {parsedMovieId}");
                Movie movie = await GetMovie(parsedMovieId);

                if (movie == default)
                {
                    return NotFound();
                }

                return View(movie);
            }
            catch (Exception ex)
            {
                return NotFound();
            }
        }

        // POST: Movies/Edit?MovieID=<MovieID>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(string movieId, Movie movie)
        {
            try
            {
                long parsedMovieId = Int64.Parse(movieId);
                // Console.WriteLine($"parsed movie id: {parsedMovieId}");

                if (parsedMovieId != movie.MovieID)
                {
                    return NotFound();
                }

                if (ModelState.IsValid)
                {
                    await _dynamoDBContext.SaveAsync<Movie>(movie);
                    return RedirectToAction(nameof(Index));
                }

                return View(movie);
            }
            catch (Exception ex)
            {
                return NotFound();
            }
        }

        // GET: Movies/Delete?MovieID=<MovieID>
        public async Task<IActionResult> Delete(string movieId)
        {
            if (movieId == null)
            {
                return NotFound();
            }

            try
            {
                long parsedMovieId = Int64.Parse(movieId);
                Movie movie = await GetMovie(parsedMovieId);

                return View(movie);
            }
            catch (Exception ex)
            {
                return NotFound();
            }
        }

        // POST: Movies/Delete?MovieID=<MovieID>
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(string movieId)
        {
            try
            {
                long parsedMovieId = Int64.Parse(movieId);
                await _dynamoDBContext.DeleteAsync<Movie>(parsedMovieId);
            }
            catch (Exception ex)
            {
                return NotFound();
            }

            return RedirectToAction(nameof(Index));
        }

        /* Utility Functions */
        private async Task<List<Movie>> GetAllMovie()
        {
            var conditions = new List<ScanCondition>();
            List<Movie> movieList = await _dynamoDBContext.ScanAsync<Movie>(conditions).GetRemainingAsync();

            return movieList;
        }

        private async Task<Movie> GetMovie(long movieId)
        {
            Movie selectedMovie = default;

            try
            {
                Movie selMovie = await _dynamoDBContext.LoadAsync<Movie>(movieId);
                if (selMovie != null)
                {
                    selectedMovie = selMovie;
                    // Console.WriteLine($"Selected movie: {selectedMovie.ToString()}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"exception thrown: {ex.StackTrace}");
            }

            return selectedMovie;
        }

        public async Task<ActionResult> Download(string s3key)
        {
            Console.WriteLine($"Download: {s3key}");
            try
            {
                var transferUtility = new TransferUtility(_s3Client);
                GetObjectRequest request = new GetObjectRequest()
                {
                    BucketName = bucketName,
                    Key = s3key
                };

                var response = await transferUtility.S3Client.GetObjectAsync(request);
                return File(response.ResponseStream, response.Headers.ContentType, response.Key);
            }
            catch (Exception ex)
            {
                throw new Exception("Movie Download Failed: " + ex.Message);
            }
        }

    }
}